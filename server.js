import express from 'express';
import axios from 'axios';
import crypto from 'crypto';
import fs from 'fs';

const app = express();
const PORT = 3000;

app.use(express.json());
app.use(express.static('.'));

// === –î–∞–Ω—ñ ===
const EMAIL = 'uramatsola1994@gmail.com';
const PASSWORD = '809504';
const BROWSER_FINGERPRINT = crypto.randomBytes(16).toString('hex');

const API_BASE = 'https://order24-api.utr.ua/api';
const CATALOG_FILE = 'catalog.json';

let TOKEN = null;

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
async function login() {
  try {
    const res = await axios.post(`${API_BASE}/login_check`, {
      email: EMAIL,
      password: PASSWORD,
      browser_fingerprint: BROWSER_FINGERPRINT
    }, {
      headers: { 'Content-Type': 'application/json' }
    });

    TOKEN = res.data.token;
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞');
  } catch (err) {
    throw new Error('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: ' + (err.response?.data || err.message));
  }
}

// –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å –ø–æ ID
async function getDetailById(detailId) {
  try {
    const res = await axios.get(`${API_BASE}/detail/${detailId}`, {
      headers: { Authorization: `Bearer ${TOKEN}` }
    });
    return res.data;
  } catch (err) {
    if (err.response?.status === 404) return null;
    if (err.response?.status === 401) {
      await login();
      return await getDetailById(detailId);
    }
    throw err;
  }
}

// ==================== –ü–æ—Å—Ç—É–ø–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–∞–ª–æ–≥—É ====================
async function updateCatalogIncrementally(startId = 300, endId = 320) { //1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
  if (!TOKEN) await login();

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤–∂–µ —ñ—Å–Ω—É—é—á–∏–π –∫–∞—Ç–∞–ª–æ–≥
  let catalog = [];
  if (fs.existsSync(CATALOG_FILE)) {
    catalog = JSON.parse(fs.readFileSync(CATALOG_FILE, 'utf-8'));
  }

  for (let id = startId; id <= endId; id++) {
    // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ –¥–µ—Ç–∞–ª—å –≤–∂–µ —î
    if (catalog.find(d => d.id === id)) continue;

    try {
      const detail = await getDetailById(id);
      if (detail && Object.keys(detail).length > 0) {
        catalog.push(detail);
        fs.writeFileSync(CATALOG_FILE, JSON.stringify(catalog, null, 2), 'utf-8');
        console.log(`‚úÖ –î–æ–¥–∞–Ω–æ –¥–µ—Ç–∞–ª—å ID=${id}`);
      }
    } catch (err) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ—Ç–∞–ª—ñ ID=${id}:`, err.message);
    }
    await new Promise(res => setTimeout(res, 1000)); // 500 –º—Å –∑–∞—Ç—Ä–∏–º–∫–∞
  }
}

// ================== API ==================
// –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–∞—Ç–∞–ª–æ–≥
app.get('/api/products', (req, res) => {
  if (!fs.existsSync(CATALOG_FILE)) {
    return res.status(404).json({ error: '–ö–∞—Ç–∞–ª–æ–≥ —â–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π' });
  }
  const data = fs.readFileSync(CATALOG_FILE, 'utf-8');
  res.send(data);
});

// ================== SERVER START ==================
(async () => {
  try {
    await login(); // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º

    // üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä
    app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${PORT}`);
    });

    // üîÑ –û–¥—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–∞–ª–æ–≥—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    console.log('üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–∞–ª–æ–≥—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É...');
    await updateCatalogIncrementally(200, 4200); // —Ç—É—Ç –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω

    // üïì –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–∞–ª–æ–≥—É
    setInterval(async () => {
      console.log('üîÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–∞–ª–æ–≥—É...');
      try {
        await updateCatalogIncrementally(200, 400);
      } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', err.message);
      }
    }, 1000 * 1); // –∫–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω

  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞:', err.message);
  }
})();

